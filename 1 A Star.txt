class Graph:
    def __init__(self,adjac_list):
        self.adjac_list=adjac_list

    def get_neighbors(self,v):
        return self.adjac_list[v]

    def h(self,n):
        H={
            'A':1,
            'B':1,
            'C':1,
            'D':1

            # 'S':8,
            # 'A':8,
            # 'B':4,
            # 'C':3,
            # 'D':99,
            # 'E':99,
            # 'G':0
        }
        return H[n]

    def a_star_algorithm(self,start,stop):
        open_lst=set([start])
        closed_lst=set([])
        poo={}
        poo[start]=0

        par={}
        par[start]=start

        while len(open_lst)>=0:
            n=None

            for v in open_lst:
                if n==None or poo[v]+self.h(v)<poo[n]+self.h(n):
                    n=v;

            if n==None:
                    print('path does not exist!')
                    return None

            if n==stop:
                    recons_path=[]

                    while par[n]!=n:
                        recons_path.append(n)
                        n=par[n]

                    recons_path.append(start)
                    recons_path.reverse()

                    print('Path found:{}'.format(recons_path))
                    return recons_path

            for (m,weight) in self.get_neighbors(n):
                    if m not in open_lst and m not in closed_lst:
                        open_lst.add(m)
                        par[m]=n
                        poo[m]=poo[n]+weight

                    else:
                        if poo[m]>poo[n]+weight:
                            poo[m]=poo[n]+weight
                            par[m]=n

                            if m in closed_lst:
                                closed_lst.remove(m)
                                open_lst.add(m)

            open_lst.remove(n)
            closed_lst.add(n)
        print('path does not exist!')
        return None



adjac_list={
    'A':[('B',1),('C',3),('D',7)],
    'B':[('D',5)],
    'C':[('D',12)]

    # 'S':[('A',1),('B',5),('C',8)],
    # 'A':[('D',3),('E',7),('G',9)],
    # 'B':[('G',4)],
    # 'C':[('G',5)]
}

graph1=Graph(adjac_list)
graph1.a_star_algorithm('A','D')
